# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# A sample workflow which sets up Snyk to analyze the full Snyk platform (Snyk Open Source, Snyk Code,
# Snyk Container and Snyk Infrastructure as Code)
# The setup installs the Snyk CLI - for more details on the possible commands
# check https://docs.snyk.io/snyk-cli/cli-reference
# The results of Snyk Code are then uploaded to GitHub Security Code Scanning
#
# In order to use the Snyk Action you will need to have a Snyk API token.
# More details in https://github.com/snyk/actions#getting-your-snyk-token
# or you can signup for free at https://snyk.io/login
#
# For more examples, including how to limit scans to only high-severity issues
# and fail PR checks, see https://github.com/snyk/actions/

name: Snyk Security

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM UTC

permissions:
  contents: read

jobs:
  snyk:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Snyk CLI to check for security issues
        # Snyk can be used to break the build when it detects security issues.
        # In this case we want to upload the SAST issues to GitHub Code Scanning
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            libcurl4-openssl-dev \
            libsqlite3-dev \
            libyaml-cpp-dev \
            pkg-config \
            ffmpeg \
            libavcodec-dev \
            libavutil-dev \
            libavformat-dev

      # Run various Snyk tests
      # All tests use continue-on-error to prevent workflow failure
      # Results are still uploaded to GitHub Security tab

      - name: Snyk Code test (SAST)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -n "$SNYK_TOKEN" ]; then
            # Run Snyk and capture both stdout and stderr
            snyk code test --sarif > snyk-code.sarif 2>snyk-error.log || SNYK_EXIT_CODE=$?
            
            # Check if the output is valid JSON
            if ! python3 -m json.tool < snyk-code.sarif > /dev/null 2>&1; then
              echo "Snyk output is not valid JSON, creating empty SARIF"
              echo '{"version": "2.1.0", "runs": []}' > snyk-code.sarif
              
              # Show the error for debugging
              echo "Snyk error output:"
              cat snyk-error.log || true
            fi
          else
            echo "SNYK_TOKEN not set, creating empty SARIF file"
            echo '{"version": "2.1.0", "runs": []}' > snyk-code.sarif
          fi
        continue-on-error: true

      - name: Snyk Open Source test (SCA)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -n "$SNYK_TOKEN" ]; then
            snyk test --all-projects || true
          else
            echo "SNYK_TOKEN not set, skipping Snyk Open Source test"
          fi
        continue-on-error: true

      - name: Snyk Infrastructure as Code test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -n "$SNYK_TOKEN" ]; then
            snyk iac test --report || true
          else
            echo "SNYK_TOKEN not set, skipping Snyk IaC test"
          fi
        continue-on-error: true

      # Container scanning (only if Dockerfile exists)
      - name: Check for Dockerfile
        id: dockerfile_exists
        run: |
          if [ -f "Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image
        if: steps.dockerfile_exists.outputs.exists == 'true'
        run: docker build -t sdrtrunk-transcriber:test .
        continue-on-error: true

      - name: Snyk Container test
        if: steps.dockerfile_exists.outputs.exists == 'true'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -n "$SNYK_TOKEN" ]; then
            snyk container test sdrtrunk-transcriber:test --file=Dockerfile || true
          else
            echo "SNYK_TOKEN not set, skipping Snyk Container test"
          fi
        continue-on-error: true

      # Ensure SARIF file exists and is valid
      - name: Validate SARIF file
        if: always()
        run: |
          if [ ! -f snyk-code.sarif ]; then
            echo "SARIF file not found, creating empty one"
            echo '{"version": "2.1.0", "runs": []}' > snyk-code.sarif
          elif ! python3 -m json.tool < snyk-code.sarif > /dev/null 2>&1; then
            echo "SARIF file is invalid JSON, replacing with empty one"
            echo '{"version": "2.1.0", "runs": []}' > snyk-code.sarif
          else
            echo "SARIF file is valid"
          fi

      # Upload results to GitHub Code Scanning
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk-code.sarif
          category: snyk-code

      # Optional: Upload Snyk reports as artifacts
      - name: Upload Snyk reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-reports
          path: |
            snyk-code.sarif
            .snyk
          retention-days: 30
          if-no-files-found: ignore